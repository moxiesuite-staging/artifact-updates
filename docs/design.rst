Software Design
===============

Truffle DB defines a schema for this smart contract data model, but seeks to
remain agnostic to resolver. This provides the desired flexibility while
affording options for compatibility.

.. uml::

   skinparam nodesep 50

   component "Truffle DB" as DB

   () GraphQL

   DB -right- GraphQL

   () "GraphQL Resolver" as Resolver

   DB .down. Resolver

Interface Compatibility
-----------------------

To conform to existing code, Truffle DB can implement the artifactor and
resolver interfaces.

.. uml::

   skinparam nodesep 50

   component "Truffle DB" as DB

   () Resolver
   () Artifactor

   ' positioning
   Artifactor -[hidden]right-> Resolver

   DB -up- Artifactor
   DB -up- Resolver

This can serve to make Truffle DB a viable drop-in replacement.

.. uml::

   skinparam nodesep 50

   component Config
   () Artifactor
   () Resolver

   ' positioning
   Artifactor -[hidden]right-> Resolver

   Config .down. Artifactor
   Config .down. Resolver

   component "Truffle DB" as DB

   DB -up- Artifactor
   DB -up- Resolver


Artifact Compatibility
----------------------

In addition, this effort requires that artifact files are maintained in their
current format in the project's ``contracts_build_directory``, as these files
are widely recognized/used/generated by both internal and external tooling.

That is: Truffle's artifacts are an interface.

Naive Approach
``````````````

By adding an interface for obtaining contract abstractions, and by introducing
an adapter component, it may be possible to drop in the existing
artifactor/resolver implementations.

.. uml::

   skinparam nodesep 50

   component "Truffle DB" as DB

   () Abstractions

   DB -left- Abstractions

   component "Abstraction Adapter" as Adapter

   () "Persistence Controller" as Controller

   Adapter -up- Controller

   DB .down. Controller

   Abstractions ... Adapter

   ' drop-in
   () "Artifactor" as OriginalArtifactor
   () "Resolver" as OriginalResolver

   component "Artifactor" as BaseArtifactor
   component "Resolver" as BaseResolver

   ' positioning
   OriginalArtifactor -[hidden]right-> OriginalResolver

   BaseArtifactor -up- OriginalArtifactor
   BaseResolver -up- OriginalResolver

   Adapter .down. OriginalArtifactor
   Adapter .down. OriginalResolver

In this model, Truffle DB interacts with the adapter by way of a controller
interface for performing persistence operations.

Using GraphQL Internally
````````````````````````

Contract abstractions are currently widely used as a
`data transfer object <https://en.wikipedia.org/wiki/Data_transfer_object>`_.

This may be limiting, since they are not plain data objects, but instead also
encapsulate behavior.

A better approach might be to make internal use of the GraphQL mechanism to
hook into the existing artifactor/resolver implementations.

This approach would not prohibit the re-use of existing artifactor/resolver
implementations, but re-use here would require the introduction of an
additional component to instantiate contract abstractions via GraphQL queries.

.. uml::

   skinparam nodesep 50

   component "Truffle DB" as DB

   () GraphQL

   DB -right- GraphQL

   component "Abstraction Adapter" as Adapter

   () "Persistence Controller" as Controller

   Adapter -up- Controller

   DB .down. Controller

   component "Query Translation" as Translation
   () Abstractions

   Translation -down- Abstractions
   Translation .up. GraphQL

   Abstractions .. Adapter

   ' drop-in
   () Artifactor
   () Resolver

   ' positioning
   Artifactor -[hidden]right-> Resolver

   component "Artifactor" as BaseArtifactor
   component "Resolver" as BaseResolver


   BaseArtifactor -up- Artifactor
   BaseResolver -up- Resolver

   Adapter .down. Artifactor
   Adapter .down. Resolver

Here, Truffle DB performs persistence operations by way of this modified
abstraction adapter, which interacts with a discrete translation layer for
converting between GraphQL queries and abstraction objects.


Implementation Plan
--------------------

Completed Work
``````````````
The architecture for Truffle DB is largely finished. A defined schema exists, and some resolver functions have been written. It is currently possible to query existing artifacts and transform this information to match the Data Model described here, without transforming the format of the underlying artifact files. It is also possible to add data to an in-memory database (in the format expected by the Data Model) and use GraphQL to query it once added.

Ongoing Work
````````````

While it is currently possible to query artifacts, not all parts of the Data Model are fully represented. Work is ongoing to finish adding all contract information as represented in the Data Model, to ensure that information portrayed therein may be queried using Truffle DB. Of note, the following still need to be added: 
   
   1) The ``LinkedBytecode`` object and its associated relationships
   2) The objects related to the ``Bytecode`` Resource, namely ``LinkReference``, ``Instruction``, ``InstructionMeta``, ``SourceMap``, and ``SourceRange``
   3) Contract Interfaces
   4) ``Network``
   5) ``Named`` Interface 
   6) The ``Deployment`` Resource and any associated relationships

Create an ``artifactsLoader`` class through which information about a project can be queried and then saved to an in-memory database. This information will follow the Data Model's specifications and may come from multiple sources in order to fully represent the schema set forth in the Data Model.

Consider the Truffle Teams use case and ensure that data is modeled and served in the most beneficial way for future integration with Truffle Teams. 

Implement persistent data storage of Data Model Resources, initially in the form of JSON files (one for each Resource) saved in parallel to existing artifacts. This will be the initial iteration of a persistent data store connected to Truffle DB. 

Scope out additional options for a persistent data layer for Truffle DB. Consider relational databases and any other useful tools that may allow Truffle DB to fully leverage GraphQL's capabilities.

Future Work
````````````

Scope out the ways in which Truffle DB can work with the (currently in progress) Truffle Event Manager system in order to maximally buttress the success of both tools. 

Arrive at an architecture for persisting Truffle DB data in the best way for using it in conjunction with GraphQL's capabilities and keeping in mind possible new use cases for Truffle DB.  
